ext {
    isCiBuild = System.getenv().get("TRAVIS") == 'true' || System.getenv().get("CI")
}
configurations.all {
    resolutionStrategy.dependencySubstitution.all { DependencySubstitution dependency ->
        if (dependency.requested instanceof ModuleComponentSelector) {
            if (group == 'org.grails' || group == 'org.grails.plugins') {
                def targetProject = findProject(":${dependency.requested.module}")
                if (targetProject != null) {
                    dependency.useTarget targetProject
                }
            }
        }
    }
}
dependencies {
    compileOnly "javax.servlet:javax.servlet-api:$servletApiVersion"
    compile project(":grails-web-gsp-taglib")


    runtime(project(":grails-web-jsp"))
    compile "commons-lang:commons-lang:2.6"
    compile "org.grails:grails-plugin-codecs:$grailsVersion"    
    astCompile "org.grails:grails-web:$grailsVersion"    
    astCompile "org.grails:grails-plugin-controllers:$grailsVersion"
    
    testCompile 'org.grails:grails-web-testing-support:2.0.0.RC1', {
        exclude module:'async'
    }
    // testCompile 'org.grails:grails-async:4.0.0.BUILD-SNAPSHOT'
    testCompile 'org.grails:grails-testing-support:2.2.1-SNAPSHOT', {
        exclude module:'async'
    }
    testCompile 'org.grails:grails-gorm-testing-support:2.0.0.RC1', {
        exclude module:'async'
    }

    testRuntime "org.grails.plugins:async"
    testCompile "javax.servlet.jsp:jsp-api:${jspApiVersion}"
    testCompile "org.springframework:spring-test:$springVersion"

    testCompile "taglibs:standard:${jstlVersion}"
    testCompile "javax.servlet:jstl:${jstlVersion}"

    testRuntime "org.grails:grails-plugin-url-mappings:$grailsVersion"
}
// disable main class
bootJar {
    mainClassName = 'dummy.Application'
}
findMainClass.onlyIf { false }
test {
    if (isCiBuild) {
        maxParallelForks = 1
        forkEvery = 10
    }
    else {
        maxParallelForks = 4
        forkEvery = 20
    }

    jvmArgs = ['-Xmx1536M']
    afterSuite {
        System.out.print('.')
        System.out.flush()
    }
}
